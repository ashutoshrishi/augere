/* Stage.js defines the staging area which is used in the editor to load plugins
 * and display their data when activated
 */

function Stage() {
    /* initArea: initialize the div which will be used as the stage */
    function initArea(stageDiv) {
        // stageDiv.innerHTML = "Testing, staging area activated";
        this.stageDiv = stageDiv;

        /* Need a register to keep the active boxes references and expire
         * them when an when needed */
        this.boxRegister  = [];

        /* A function needs to keep the check on the timouts of the boxes,
         * Expiry timeouts are run in per second basis.
         * TODO: move the register check function to a
         * global background process
        */
        var timerID = setInterval(function(register) {
            return function() {
                registerCleanup(register);
            }
        }(this.boxRegister), 1000);

        /* boxid to identify boxes */
        global.boxid = 0;
    }

    /* generateBoxDiv: generate a div DOM element to append in the
     * staging area based on certain parameters. */
    function generateBoxDiv(color) {
        var boxDiv = $("<div><h2 id=\'title\'></h2><span id=\'body\'></span></div>");
        boxDiv.addClass("box-simple");

        if (color) { boxDiv.css("border-top", "3px solid " + color); }

        boxDiv.setTitle = function (title) {
            this.find("#title").text(title);
        };

        boxDiv.setBody = function (body) {
            this.find("#body").html(body);
        };

        return boxDiv;
    }

    /* appendBox: append a information box as a css div at the end of
     * the stage */
    function appendBox(box) {
        var $boxDiv = generateBoxDiv(box.borderColor);
        $boxDiv.setTitle(box.title);
        $boxDiv.setBody(box.html);
        $boxDiv.appendTo(this.stageDiv);
        this.boxRegister.push({
            div: $boxDiv,
            box: box
        });
    }

    /* Function to cleanup the boxRegister and expire the boxes which
     * have crossed their timeouts.
    */
    function registerCleanup(register) {

        if (typeof register != 'undefined' && register.length > 0) {
        /* Now remove the divs with 0 timeout */
            $.each(register, function(i, val) {
                if (typeof val.box != 'undefined' && val.box.timeout != -1) {
                    val.box.timeout -= 1;
                    if (val.div && val.box.timeout == 0) {
                        val.div.fadeOut("slow", function () {
                            val.div.remove();
                        });
                    }
                }
            });

            // remove the useless boxes
            for (var i = 0; i < register.length; i++) {
                if (register[i].box.timeout == 0) {
                    register.splice(i, 1);
                }
            }
        }
    }

    this.initArea = initArea;
    this.appendBox = appendBox;
}

module.exports = new Stage;
